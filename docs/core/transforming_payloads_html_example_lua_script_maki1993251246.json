{"objectID":"_transforming_payloads.html#example_lua_script_making_use_of_the_endpoint_variable","parent":"_transforming_payloads.html#lua_incoming_payload_variable","pageViews":0,"url":"writerside-documentation/transforming-payloads.html#example-lua-script-making-use-of-the-endpoint-variable","mainTitle":"Transforming payloads","product":"","headings":"Transforming payloads,Example Lua script making use of the endpoint variable","content":"You have a system that sends data into the following MQTT topics:\nsensor/hardware/cpu:\ntemperature\u003d20\nload\u003d2\nsensor/hardware/memory:\nfree\u003d80\nused\u003d20\nloadAverage\u003d50\nThe format of the data is exactly the same, so you want to implement your Lua script logic only once, however the resulting eLP should be differentiated based on the topic in which the data was received.\nBelow is an example of how to utilise the endpoint variable in your Lua script to handle that:\n-- Splitting the payload into lines\n\nlocal lines \u003d {}\nfor line in payload:gmatch(\"[^\\r\\n]+\") do\n    table.insert(lines, line)\nend\n\n-- Extracting the category and measurements\nlocal measurements \u003d {}\nfor i \u003d 1, #lines do\n    local measurement \u003d lines[i]:gsub(\"%s+\", \"\")  -- Remove whitespace\n    table.insert(measurements, measurement)\nend\n\n-- Logic based on the endpoint\nif endpoint \u003d\u003d \"sensor/hardware/cpu\" then\n    -- Specific logic for CPU sensor\n    transformedPayload \u003d \"cpu \" .. table.concat(measurements, \",\")\nelseif endpoint \u003d\u003d \"sensor/hardware/memory\" then\n    -- Specific logic for Chipset sensor\n    transformedPayload \u003d \"memory \" .. table.concat(measurements, \",\")\nelse\n    -- Default logic for other endpoints (if any)\n    transformedPayload \u003d  \"hardware \" .. table.concat(measurements, \",\")\nend\n\nreturn transformedPayload\n","pageTitle":"Example Lua script making use of the endpoint variable","metaDescription":"","type":"Documentation","breadcrumbs":"Device Agent","root":0,"depth":1}