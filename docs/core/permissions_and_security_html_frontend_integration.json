{"objectID":"_permissions_and_security.html#frontend_integration","parent":"_permissions_and_security.html#backend_integration","pageViews":0,"url":"writerside-documentation/permissions-and-security.html#frontend-integration","mainTitle":"Permissions and Security","product":"","headings":"Permissions and Security,Frontend integration","content":"Security and permissions can also be checked on the frontend side allowing to show, hide, or disable certain UI elements based on the user\u0027s permissions. Note that frontend permissions checks are only used for UI purposes and should not be used as a security measure; you should always secure your backend endpoints as well as described above.\nThe security policies associated with the currently logged-in user are fetched during login and stored in the browser\u0027s session storage under the key X-ESTHESIS-PERMISSIONS. That effectively means that if you change policies for a user, they will need to log out and log back in to see the changes (or just refreshing their browser); backend security checks are automatically updated.\nIn your frontend code you do not need to directly access the session storage, as there are helper methods available. Here is how you can check for permissions in your frontend code:\n2. Have your Angular component extending the SecurityBaseComponent class. SecurityBaseComponent provides several variations of an isPermitted method that you can use to check for permissions, but also performs automatic permission evaluations exposing the following instance variables: - allowRead: Indicating whether the user is allowed to read the resource. - allowCreate: Indicating whether the user is allowed to create the resource. - allowWrite: Indicating whether the user is allowed to edit the resource. - allowDelete: Indicating whether the user is allowed to delete the resource. 4. Have your Angular component\u0027s constructor call its parent constructor passing the correct category and resource id - if applicable. Once you have properly initialised your Angular component, you can influence how the UI should be rendered based on the user\u0027s permissions. For example:\n\u0026lt;button (click)\u003d\"delete()\"\n        *ngIf\u003d\"allowDelete \u0026\u0026 id !\u003d\u003d appConstants.NEW_RECORD_ID\"\n        class\u003d\"btn btn-sm btn-accent\"\u0026gt;DELETE\n\u0026lt;/button\u0026gt;\nor\n\u0026lt;button (click)\u003d\"save()\"\n        *ngIf\u003d\"allowCreate || allowWrite\" [disabled]\u003d\"form.invalid\"\n        class\u003d\"btn btn-sm btn-primary\"\u0026gt;SAVE\n\u0026lt;/button\u0026gt;\n","pageTitle":"Frontend integration","metaDescription":"","type":"Documentation","breadcrumbs":"Developers Guide","root":0,"depth":1}