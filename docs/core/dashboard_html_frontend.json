{"objectID":"_dashboard.html#frontend","parent":"_dashboard.html#creating_a_new_dashboard_component","pageViews":0,"url":"writerside-documentation/dashboard.html#frontend","mainTitle":"Dashboard","product":"","headings":"Dashboard,Frontend","content":"2. Update app.constants.ts, creating a new entry for your component under DASHBOARD.ITEM constant. The TYPE property it is the key (i.e. name) to identify your component, the COLUMNS is the default number of columns that should be assigned to your component, and the DEFAULTS is the default configuration for your component. You need to define all three properties. If your component should only be included in a dashboard once, add it to the SINGLE_INSTANCE_ITEMS array. 4. Update dashboard-item-new.component.ts, adding your component to the itemsList array in ngOnInit(). 6. If your component requires custom configuration options, create a DTO to capture your component\u0027s configuration under dto/configuration. The DTO should be named dashboard-item-\u0026lt;type\u0026gt;-configuration-dto.ts. 8. Create \u0027view\u0027 and \u0027edit\u0027 Angular components for your component under dashboard/items. The \u0027view\u0027 component should be named dashboard-item-\u0026lt;type\u0026gt;.component.ts and the \u0027edit\u0027 component should be named dashboard-item-\u0026lt;type\u0026gt;-edit.component.ts. 10. The value targeting your component will be available in lastMessage variables. If you want your component to also receive real-time notification when that value changes (e.g. to perform a manual action \u0027on change\u0027) you can have your component subscribing to the lastMessageEmitter emitter. Check existing components for examples on how to do this. 12. Update dashboard-view.component.html to include your component in the ngxMasonryItem div. ","pageTitle":"Frontend","metaDescription":"","type":"Documentation","breadcrumbs":"Developers Guide","root":0,"depth":1}