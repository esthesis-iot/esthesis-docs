{"objectID":"_dev_environment_setup.html#notes","parent":"_dev_environment_setup.html#requirements","pageViews":0,"url":"writerside-documentation/dev-environment-setup.html#notes","mainTitle":"Dev environment setup","product":"","headings":"Dev environment setup,Notes","content":"2. Before trying to log in to the application open the (https) Keycloak URL into your browser in order to accept the self-signed certificate. Otherwise, the first redirect from the application\u0027s UI to Keycloak will fail.\n4. There is a convenience script destroy.sh in the root of each helm package. You can use it to fully erase all installations performed for that particular package together with any additional Kubernetes resources that do not get automatically deleted by uninstalling the Helm chart (for example, PVCs).\n6. Installing all components for development under a single Kubernetes node may require you to increase certain OS limits, here are the ones we have found to be relevant in Ubuntu server 23.04:\nsudo sysctl fs.inotify.max_user_instances\u003d1280\nsudo sysctl fs.inotify.max_user_watches\u003d655360\nIf you face any issues building the project via Maven, you may also need to increase the number of open files:\nulimit -S -n 65536\n8. You can create a local-env.sh script alongside the dev-{service}.sh scripts to customise your local development environment. If such a file exist, it will be sourced by the dev-{service}.sh.\n10. srv-kubernetes service needs to be able to create new pods in your Kubernetes environment. This requires a valid ~/.kube/config file in your home directory. In case you are splitting your Kubernetes config into multiple files, you can use the KUBECONFIG environment variable to point to the config file you want to use. You can specify this variable in your local-env.sh file as explained above.\n","pageTitle":"Notes","metaDescription":"","type":"Documentation","breadcrumbs":"Developers Guide","root":0,"depth":1}